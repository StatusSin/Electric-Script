ElectricScript {
	Program 		= Statement+
    
    Statement 		= PrintStatement
    				| VarDec
                    | AssignStmt
                    | IfStmt							
                    | Func
                    | Return
                    | For
                    | Break
                    | Comment
                    
    For				= sequential "(" ForArg ")" Block
    
    ForArg			= IntDec ";" Exp1 ";" modifier
    
    modifier		= id "++" | id "--"
    
    Block			= "+terminal" Statement* "-terminal"
    
    VarDec			= IntDec | BoolDec | StrDec
    
    IntDec			= load Var "=" Exp
    
    BoolDec			= switch Var "=" bool | switch Var "=" Exp
    
    StrDec			= label Var "=" stringLiteral
    
    Comment			= feedback (~"\n" any)*
                    
    Break			= shortCircuit
                    
    Return			= out Value
    
    Value			= Var | stringLiteral | numeral | array
                    
    Func			= circuit id"(" type id ")" Block
                    
    Else			= else IfStmt?
    				| else Block
                    
    AssignStmt		= id "=" Exp
    
    IfStmt			= zener"(" Exp1 ")" Block Else?
    
    PrintStatement 	= display "(" Exp ")"
    
    id				= ~keyword idChar+
    
    type			= load | label | switch
    
    idChar			= letter+
    
    keyword			= display | load | label | switch | zener | circuit | else | on | off | out | sequential | feedback
    
    Var				= id
    
    
    Exp				= "-" Exp									--neg
    				| Exp1
                    
    Exp1			= Exp2 ("<="|"<"|"=="|"!="|">="|">") Exp2	--binary
    				| Exp2
                    
   	Exp2			= Exp2 ("+" | "-") Exp3						--binary
    				| Exp3
                    
    Exp3			= Exp3 ("*" | "//" | "/" | "%") Exp4		--binary
    				| Exp4
                    
    Exp4			= Exp5 "^" Exp4								--binary
    				| Exp5
    
    Exp5			= Term
    				| "(" Exp ")"								--paren
    
    
    Term 			= numeral | Var | stringLiteral
    
    switch 			= "switch" ~idChar
    load 			= "load" ~idChar
    label			= "label" ~idChar
    display			= "display" ~idChar
    numeral 		= digit+ ("."digit+)?
    zener			= "zener" ~idChar
    bool			= on | off
    on				= "on" ~idChar
    off				= "off" ~idChar
    else			= "else" ~idChar
    circuit			= "circuit" ~idChar
    out				= "out" ~idChar
    array			= "[" element* "]"
    elementVal		= numeral | stringLiteral | id
    element			= elementVal ", " 			--elem
    				| elementVal				--endElem
    sequential		= "sequential" ~idChar
    shortCircuit	= "short-circuit" ~idChar
    feedback		= "feedback" ~idChar
    
    stringLiteral 	= "\"" (~"\"" any)* "\""
}