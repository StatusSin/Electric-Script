ElectricScript {
	Program 		= Statement+
    
    Statement 		= PrintStatement
    				| VarDec
                    | AssignStmt
                    | IfStmt							
                    | Else
                    | Func
                    | Return
                    | For
                    | Break
                    
    Break			= shortCircuit
                    
    For				= sequential "(" load id "=" numeral ";" id cond numeral ";" id modifier ")" Block
                    
    Return			= out Value
    
    Value			= Var | stringLiteral | numeral | array
                    
    Func			= circuit id"(" type id ")" Block
                    
    Else			= else IfStmt?
    				| else Block
                    
    AssignStmt		= id "=" Exp
    
    Block			= "+terminal" Statement* "-terminal"
    
    IfStmt			= zener"(" Exp cond Exp ")" Block
    
    VarDec			= IntDec | BoolDec | StrDec
    
    IntDec			= load Var "=" numeral | load Var "=" Exp
    
    BoolDec			= switch Var "=" bool
    
    StrDec			= label Var "=" stringLiteral
    
    PrintStatement 	= display "(" Exp ")"
    
    id				= ~keyword idChar+
    
    type			= load | label | switch
    
    idChar			= letter+
    
    keyword			= display | load | label | switch | zener | circuit | else | on | off | out | sequential
    
    modifier		= "++" | "--"
    
    cond			= "!=" | "==" | "<=" | ">="
    
    Var				= id
    
    Exp 			= Exp "+" Exp				--add
    				| Exp "-" Exp				--sub
                    | Exp "^" Exp				--exp
                    | Exp "*" Exp				--mul
                    | Exp "%" Exp				--mod
                    | Exp "/" Exp				--div
                    | Exp "//" Exp				--intdiv
    				| Term
                   
    Term 			= numeral | Var | stringLiteral
    
    switch 			= "switch" ~idChar
    load 			= "load" ~idChar
    label			= "label" ~idChar
    display			= "display" ~idChar
    numeral 		= digit+ ("."digit+)?
    zener			= "zener" ~idChar
    bool			= on | off
    on				= "on" ~idChar
    off				= "off" ~idChar
    else			= "else" ~idChar
    circuit			= "circuit" ~idChar
    out				= "out" ~idChar
    array			= "[" element* finalElement "]"
    finalElement	= numeral | stringLiteral | id
    element			= finalElement ", " | finalElement ","
    sequential		= "sequential" ~idChar
    shortCircuit	= "short-circuit" ~idChar
    
    stringLiteral 	= "\"" (~"\"" any)* "\""
}